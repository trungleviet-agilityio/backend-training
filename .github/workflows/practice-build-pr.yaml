name: Build and Deploy

on:
  pull_request:
    branches:
      - main
    paths:
      - 'docker-practice/**'

jobs:
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docker-practice

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run linting
        run: |
          echo "Running code quality checks..."
          ruff check . --output-format=github
          black --check --diff .
          echo "✅ Code quality checks passed!"

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docker-practice

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          DJANGO_SETTINGS_MODULE: core.settings.test
        run: |
          echo "Running unit tests..."
          python manage.py migrate --no-input
          pytest -v --tb=short
          echo "✅ All tests passed!"

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    defaults:
      run:
        working-directory: docker-practice

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-practice
          file: ./docker-practice/Dockerfile
          push: false
          tags: docker-practice-app:test

      - name: Test Docker image
        run: |
          echo "Testing Docker image functionality..."
          docker run --rm docker-practice-app:test python --version
          echo "✅ Docker build successful!"

  merge-ready:
    name: Merge Ready
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build]
    if: github.event_name == 'pull_request'
    steps:
      - name: Check all jobs status
        run: |
          echo "Checking status of all required jobs for PR merge..."

          # Check if any job failed
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Code quality checks failed"
            exit 1
          fi

          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Unit tests failed"
            exit 1
          fi

          if [[ "${{ needs.docker-build.result }}" != "success" ]]; then
            echo "❌ Docker build failed"
            exit 1
          fi

          echo "✅ All checks passed! PR is ready to merge to main."
          echo "::notice::All quality gates passed - merge button is enabled"

  docker-push:
    name: Push to Docker Hub
    runs-on: ubuntu-latest
    needs: [lint, test, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./docker-practice
          file: ./docker-practice/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/docker-practice-app:latest

      - name: Deployment ready
        run: |
          echo "✅ Docker image pushed successfully!"
          echo "::notice::Image ready for deployment"
