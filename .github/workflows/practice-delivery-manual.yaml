name: Manual Deploy

on:
  workflow_dispatch:
    inputs:
      docker_tag:
        description: 'Docker image tag (default: latest)'
        required: false
        default: 'latest'
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: docker-practice-cluster
  ECS_SERVICE: docker-practice-service

jobs:
  validate-input:
    name: Validate Input
    runs-on: ubuntu-latest
    outputs:
      deploy-tag: ${{ steps.validate.outputs.tag }}
      target-env: ${{ steps.validate.outputs.environment }}

    steps:
      - name: Validate deployment inputs
        id: validate
        run: |
          echo "Validating manual deployment inputs..."

          # Validate Docker tag
          TAG="${{ github.event.inputs.docker_tag }}"
          if [[ -z "$TAG" ]]; then
            TAG="latest"
          fi
          echo "tag=$TAG" >> $GITHUB_OUTPUT

          # Validate environment
          ENV="${{ github.event.inputs.environment }}"
          if [[ "$ENV" != "production" && "$ENV" != "staging" ]]; then
            echo "❌ Invalid environment: $ENV"
            exit 1
          fi
          echo "environment=$ENV" >> $GITHUB_OUTPUT

          echo "✅ Input validation passed"
          echo "- Docker tag: $TAG"
          echo "- Environment: $ENV"

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: validate-input
    environment: ${{ needs.validate-input.outputs.target-env }}

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS connection
        run: |
          echo "Verifying AWS connection..."
          aws sts get-caller-identity
          aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }}
          echo "✅ AWS connection verified"

      - name: Deploy to ECS
        run: |
          echo "Deploying to ECS..."
          echo "- Cluster: ${{ env.ECS_CLUSTER }}"
          echo "- Service: ${{ env.ECS_SERVICE }}"
          echo "- Environment: ${{ needs.validate-input.outputs.target-env }}"
          echo "- Docker tag: ${{ needs.validate-input.outputs.deploy-tag }}"

          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment

          echo "✅ ECS deployment initiated"

  deployment-status:
    name: Deployment Status
    runs-on: ubuntu-latest
    needs: [validate-input, deploy]
    if: always()

    steps:
      - name: Report deployment status
        run: |
          echo "Manual Deployment Status Report:"
          echo "================================"

          if [[ "${{ needs.validate-input.result }}" != "success" ]]; then
            echo "❌ Input validation failed"
            exit 1
          fi

          if [[ "${{ needs.deploy.result }}" != "success" ]]; then
            echo "❌ Manual deployment failed"
            exit 1
          fi

          echo "✅ Manual deployment completed successfully!"
          echo "- Environment: ${{ needs.validate-input.outputs.target-env }}"
          echo "- Docker tag: ${{ needs.validate-input.outputs.deploy-tag }}"
          echo "::notice::Manual deployment successful"
