name: Shared CI Jobs

on:
  workflow_call:
    inputs:
      target-branch:
        required: true
        type: string
        description: 'Target branch (main or develop)'
      skip-on-no-changes:
        required: false
        type: boolean
        default: false
        description: 'Whether to skip tests when no relevant changes detected'
    outputs:
      python-changed:
        description: 'Whether Python files changed'
        value: ${{ jobs.changes.outputs.python }}
      docker-changed:
        description: 'Whether Docker files changed'
        value: ${{ jobs.changes.outputs.docker }}

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        if: ${{ inputs.skip-on-no-changes }}
        id: filter
        with:
          filters: |
            python:
              - 'docker-practice/**/*.py'
              - 'docker-practice/requirements.txt'
              - 'docker-practice/pyproject.toml'
            docker:
              - 'docker-practice/Dockerfile'
              - 'docker-practice/docker-compose.yml'
              - 'docker-practice/scripts/docker/**'

      # Always set outputs to 'true' if not using change detection
      - name: Set all changes to true
        if: ${{ !inputs.skip-on-no-changes }}
        run: |
          echo "python=true" >> $GITHUB_OUTPUT
          echo "docker=true" >> $GITHUB_OUTPUT

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docker-practice
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run linting
        run: |
          echo "Running code quality checks..."
          ruff check . --output-format=github
          black --check --diff .
          echo "✅ Code quality checks passed!"

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ !inputs.skip-on-no-changes || needs.changes.outputs.python == 'true' }}
    defaults:
      run:
        working-directory: docker-practice
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          DJANGO_SETTINGS_MODULE: core.settings.test
        run: |
          echo "Running unit tests..."
          python manage.py migrate --no-input
          pytest -v --tb=short
          echo "✅ All tests passed!"

  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ !inputs.skip-on-no-changes || needs.changes.outputs.docker == 'true' || needs.changes.outputs.python == 'true' }}
    defaults:
      run:
        working-directory: docker-practice
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build PostgreSQL image
        run: |
          echo "Building PostgreSQL Docker image..."
          docker build -t docker-practice-postgres:${{ inputs.target-branch }} ./scripts/docker/postgres
          echo "✅ PostgreSQL image built successfully!"
      - name: Build Django application image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-practice
          file: ./docker-practice/Dockerfile
          push: false
          tags: docker-practice-app:${{ inputs.target-branch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test Docker images
        run: |
          echo "Testing Docker images functionality..."
          docker run --rm docker-practice-app:${{ inputs.target-branch }} python --version
          docker run --rm docker-practice-app:${{ inputs.target-branch }} python manage.py check
          echo "✅ Docker images tested successfully!"
      - name: Test Docker Compose setup
        if: ${{ inputs.target-branch == 'main' }}
        run: |
          echo "Testing Docker Compose configuration..."
          docker-compose config
          docker-compose build
          docker-compose up -d
          timeout 60 bash -c 'until docker-compose ps | grep "Up"; do sleep 2; done'
          docker-compose exec -T web python manage.py check || echo "Service check completed"
          docker-compose logs web
          docker-compose down
          echo "✅ Docker Compose setup tested successfully!"
