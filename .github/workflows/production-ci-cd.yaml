name: "CI/CD: Test, Build, Deploy (Production)"
# Full CI/CD pipeline for docker-practice: test, build, push, and deploy to VPS
# Uses /docker-practice/Dockerfile and can use scripts from /docker-practice/scripts

on:
  pull_request:
    branches:
      - main
    paths:
      - 'docker-practice/**'
  push:
    branches:
      - main
    paths:
      - 'docker-practice/**'

env:
  DOCKER_IMAGE: docker-practice-app
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  shared-ci:
    uses: ./.github/workflows/shared-ci-jobs.yml
    with:
      target-branch: main
      skip-on-no-changes: false
      run-docker-compose: false
      container_name: docker-practice-app
      healthcheck_url: http://localhost:8000/health/
    secrets:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
      VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}

  build-and-push:
    needs: shared-ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-practice
          file: ./docker-practice/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            set -e
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest || true
            docker stop docker-practice-app || true
            docker rm docker-practice-app || true
            docker run -d --name docker-practice-app --restart unless-stopped -p 8080:8000 -v /app/data:/app/data ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
            docker image prune -f
            echo 'Verifying Swagger UI endpoint...'
            for i in {1..30}; do
              STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://127.0.0.1:8080/api/v1/schema/swagger-ui)
              if [ "$STATUS" = "200" ]; then
                echo "Swagger UI is accessible (HTTP 200)"
                curl -s http://127.0.0.1:8080/api/v1/schema/swagger-ui | head -20
                exit 0
              fi
              echo "Waiting for Swagger UI endpoint... (HTTP $STATUS)"
              sleep 2
            done
            echo "Swagger UI endpoint not accessible after 60 seconds."
            exit 1

  health-check:
    needs: deploy
    uses: ./.github/workflows/shared-ci-jobs.yml
    with:
      target-branch: main
      container_name: docker-practice-app
      healthcheck_url: http://localhost:8080/health/
    secrets:
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USERNAME: ${{ secrets.VPS_USERNAME }}
      VPS_SSH_KEY: ${{ secrets.VPS_SSH_KEY }}
