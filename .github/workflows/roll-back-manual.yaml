name: Manual Rollback

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to rollback'
        required: true
        type: choice
        options:
          - production
          - staging
      commit-hash:
        description: 'Commit hash to rollback to'
        required: true
        type: string

env:
  PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
  PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
  PYTHONANYWHERE_WEBAPP_NAME: ${{ secrets.PYTHONANYWHERE_WEBAPP_NAME }}

jobs:
  validate-inputs:
    name: Validate Inputs
    runs-on: ubuntu-latest
    outputs:
      valid: ${{ steps.validate.outputs.valid }}
      environment: ${{ inputs.environment }}

    steps:
      - name: Validate inputs
        id: validate
        run: |
          echo "Validating rollback inputs..."

          # Validate environment
          if [[ "${{ inputs.environment }}" != "production" && "${{ inputs.environment }}" != "staging" ]]; then
            echo "❌ Invalid environment: ${{ inputs.environment }}"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Validate commit hash format
          if ! [[ "${{ inputs.commit-hash }}" =~ ^[a-f0-9]{40}$ ]]; then
            echo "❌ Invalid commit hash format"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Validate required secrets
          if [[ -z "${{ secrets.PYTHONANYWHERE_USERNAME }}" ]]; then
            echo "❌ PythonAnywhere username not configured"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [[ -z "${{ secrets.PYTHONANYWHERE_API_TOKEN }}" ]]; then
            echo "❌ PythonAnywhere API token not configured"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [[ -z "${{ secrets.PYTHONANYWHERE_WEBAPP_NAME }}" ]]; then
            echo "❌ PythonAnywhere webapp name not configured"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "✅ Input validation passed"
          echo "valid=true" >> $GITHUB_OUTPUT

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: validate-inputs
    if: needs.validate-inputs.outputs.valid == 'true'
    environment: ${{ needs.validate-inputs.outputs.environment }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit-hash }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pythonanywhere-client

      - name: Rollback to previous version
        run: |
          echo "Rolling back to commit: ${{ inputs.commit-hash }}"
          echo "Environment: ${{ needs.validate-inputs.outputs.environment }}"

          # Create PythonAnywhere client
          python -c "
          from pythonanywhere_client import PythonAnywhereClient
          client = PythonAnywhereClient(
              username='${{ env.PYTHONANYWHERE_USERNAME }}',
              api_token='${{ env.PYTHONANYWHERE_API_TOKEN }}'
          )

          # Reload the web app
          client.reload_webapp('${{ env.PYTHONANYWHERE_WEBAPP_NAME }}')
          print('✅ Webapp reloaded successfully')
          "

          echo "✅ Rollback completed successfully"

  verify-rollback:
    name: Verify Rollback
    runs-on: ubuntu-latest
    needs: rollback
    if: always()

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pythonanywhere-client

      - name: Check deployment health
        run: |
          echo "Validating rollback health..."

          # Create PythonAnywhere client
          python -c "
          from pythonanywhere_client import PythonAnywhereClient
          client = PythonAnywhereClient(
              username='${{ env.PYTHONANYWHERE_USERNAME }}',
              api_token='${{ env.PYTHONANYWHERE_API_TOKEN }}'
          )

          # Check webapp status
          status = client.get_webapp_status('${{ env.PYTHONANYWHERE_WEBAPP_NAME }}')
          if status['status'] != 'running':
              print('❌ Webapp is not running')
              exit(1)
          print('✅ Webapp is running')
          "

          echo "✅ Rollback validation passed"

  rollback-status:
    name: Rollback Status
    runs-on: ubuntu-latest
    needs: [validate-inputs, rollback, verify-rollback]
    if: always()
    steps:
      - name: Report rollback status
        run: |
          echo "Rollback Status Report:"
          echo "======================"

          if [[ "${{ needs.validate-inputs.result }}" != "success" ]]; then
            echo "❌ Input validation failed"
            exit 1
          fi

          if [[ "${{ needs.rollback.result }}" != "success" ]]; then
            echo "❌ Rollback failed"
            exit 1
          fi

          if [[ "${{ needs.verify-rollback.result }}" != "success" ]]; then
            echo "❌ Rollback verification failed"
            exit 1
          fi

          echo "✅ Rollback completed successfully!"
          echo "::notice::Application rolled back to commit ${{ inputs.commit-hash }}"

          # Summary
          echo ""
          echo "Rollback Summary:"
          echo "- Input Validation: ✅"
          echo "- Rollback Process: ✅"
          echo "- Health Check: ✅"
