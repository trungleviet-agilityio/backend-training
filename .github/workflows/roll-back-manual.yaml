name: Rollback (Manual)
run-name: ${{ github.ref_name }}

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        type: choice
        default: staging
        options:
          - staging
          - production
      commit_hash:
        description: 'Commit hash to rollback to'
        required: true
        type: string
      dry_run:
        description: 'Dry run?'
        required: true
        type: choice
        default: 'true'
        options:
          - 'true'
          - 'false'

env:
  PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
  PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
  PYTHONANYWHERE_WEBAPP_NAME: ${{ secrets.PYTHONANYWHERE_WEBAPP_NAME }}

jobs:
  rollback:
    name: Rollback
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.commit_hash }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pythonanywhere-client

      - name: Build Docker image (optional)
        run: |
          docker build -f docker-practice/Dockerfile -t my-app:latest docker-practice/

      - name: Rollback to previous version
        if: inputs.dry_run == 'false'
        run: |
          echo "üöÄ Rolling back to commit: ${{ inputs.commit_hash }}"
          echo "üì¶ Environment: ${{ inputs.environment }}"
          echo "üîß Webapp: ${{ env.PYTHONANYWHERE_WEBAPP_NAME }}"

          # Create PythonAnywhere client
          python -c "
          from pythonanywhere_client import PythonAnywhereClient
          client = PythonAnywhereClient(
              username='${{ env.PYTHONANYWHERE_USERNAME }}',
              api_token='${{ env.PYTHONANYWHERE_API_TOKEN }}'
          )

          # Reload the web app
          client.reload_webapp('${{ env.PYTHONANYWHERE_WEBAPP_NAME }}')
          print('‚úÖ Webapp reloaded successfully')
          "

      - name: Dry Run
        if: inputs.dry_run == 'true'
        run: |
          echo "üîç Dry Run Mode"
          echo "=============="
          echo "üì¶ Environment: ${{ inputs.environment }}"
          echo "üîç Commit: ${{ inputs.commit_hash }}"
          echo "üîß Webapp: ${{ env.PYTHONANYWHERE_WEBAPP_NAME }}"
          echo ""
          echo "‚úÖ This was a dry run - no changes were made"

  verify-rollback:
    name: Verify Rollback
    runs-on: ubuntu-latest
    needs: rollback
    if: always()

    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pythonanywhere-client

      - name: Check deployment health
        run: |
          echo "Validating rollback health..."

          # Create PythonAnywhere client
          python -c "
          from pythonanywhere_client import PythonAnywhereClient
          client = PythonAnywhereClient(
              username='${{ env.PYTHONANYWHERE_USERNAME }}',
              api_token='${{ env.PYTHONANYWHERE_API_TOKEN }}'
          )

          # Check webapp status
          status = client.get_webapp_status('${{ env.PYTHONANYWHERE_WEBAPP_NAME }}')
          if status['status'] != 'running':
              print('‚ùå Webapp is not running')
              exit(1)
          print('‚úÖ Webapp is running')
          "

          echo "‚úÖ Rollback validation passed"

  rollback-status:
    name: Rollback Status
    runs-on: ubuntu-latest
    needs: [rollback, verify-rollback]
    if: always()
    steps:
      - name: Report rollback status
        run: |
          echo "Rollback Status Report:"
          echo "======================"

          if [[ "${{ needs.rollback.result }}" != "success" ]]; then
            echo "‚ùå Rollback failed"
            exit 1
          fi

          if [[ "${{ needs.verify-rollback.result }}" != "success" ]]; then
            echo "‚ùå Rollback verification failed"
            exit 1
          fi

          echo "‚úÖ Rollback completed successfully!"
          echo "::notice::Application rolled back to commit ${{ inputs.commit_hash }}"

          # Summary
          echo ""
          echo "Rollback Summary:"
          echo "- Rollback Process: ‚úÖ"
          echo "- Health Check: ‚úÖ"
