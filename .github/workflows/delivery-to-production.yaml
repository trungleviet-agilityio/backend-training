name: Deploy to Production
run-name: ${{ github.ref_name }}

on:
  push:
    branches:
      - main
    paths:
      - 'docker-practice/**'

env:
  PYTHONANYWHERE_USERNAME: ${{ secrets.PYTHONANYWHERE_USERNAME }}
  PYTHONANYWHERE_API_TOKEN: ${{ secrets.PYTHONANYWHERE_API_TOKEN }}
  PYTHONANYWHERE_WEBAPP_NAME: ${{ secrets.PYTHONANYWHERE_WEBAPP_NAME }}

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pythonanywhere-client

      - name: Build Docker image (optional)
        run: |
          docker build -f docker-practice/Dockerfile -t my-app:latest docker-practice/

      - name: Deploy to PythonAnywhere
        run: |
          echo "üöÄ Deploying to Production..."
          echo "üì¶ Environment: Production"
          echo "üîß Webapp: ${{ env.PYTHONANYWHERE_WEBAPP_NAME }}"
          echo "üåø Commit: ${{ github.sha }}"

          # Create PythonAnywhere client
          python -c "
          from pythonanywhere_client import PythonAnywhereClient
          client = PythonAnywhereClient(
              username='${{ env.PYTHONANYWHERE_USERNAME }}',
              api_token='${{ env.PYTHONANYWHERE_API_TOKEN }}'
          )

          # Reload the web app
          client.reload_webapp('${{ env.PYTHONANYWHERE_WEBAPP_NAME }}')
          print('‚úÖ Webapp reloaded successfully')
          "

      - name: Verify deployment
        run: |
          echo "üîç Verifying deployment..."

          # Create PythonAnywhere client
          python -c "
          from pythonanywhere_client import PythonAnywhereClient
          client = PythonAnywhereClient(
              username='${{ env.PYTHONANYWHERE_USERNAME }}',
              api_token='${{ env.PYTHONANYWHERE_API_TOKEN }}'
          )

          # Check webapp status
          status = client.get_webapp_status('${{ env.PYTHONANYWHERE_WEBAPP_NAME }}')
          if status['status'] != 'running':
              print('‚ùå Webapp is not running')
              exit(1)
          print('‚úÖ Webapp is running')
          "
