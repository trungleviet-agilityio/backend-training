name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'docker-learning/practice/docker-compose-practice/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker-learning/practice/docker-compose-practice/**'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          cd docker-learning/practice/docker-compose-practice
          python -m pip install --upgrade pip
          pip install -r src/requirements/dev.txt
      - name: Run ruff check
        run: cd docker-learning/practice/docker-compose-practice && ruff check .
      - name: Run ruff format check
        run: cd docker-learning/practice/docker-compose-practice && ruff format --check .

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          cd docker-learning/practice/docker-compose-practice
          python -m pip install --upgrade pip
          pip install -r src/requirements/dev.txt
      - name: Run tests
        run: cd docker-learning/practice/docker-compose-practice && PYTHONPATH=src pytest --cov=src src/tests/ -v

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-learning/practice/docker-compose-practice/src
          file: ./docker-learning/practice/docker-compose-practice/deploy/docker/app/Dockerfile
          build-args: |
            ENV=production
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-compose-practice:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/docker-compose-practice:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to production server
        run: |
          echo "ðŸš€ Deploying image ${{ secrets.DOCKERHUB_USERNAME }}/docker-compose-practice:${{ github.sha }}"
          echo "ðŸ“‹ Deployment steps:"
          echo "  1. Pull new image"
          echo "  2. Update docker-compose.prod.yml with new tag"
          echo "  3. Rolling update with zero downtime"
          echo "  4. Health check verification"
          # TODO: Replace with actual deployment script
          # ssh ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} "cd /app && docker compose -f docker-compose.prod.yml pull && docker compose -f docker-compose.prod.yml up -d"
