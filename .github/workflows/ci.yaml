name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'docker-learning/practice/docker-compose-practice/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'docker-learning/practice/docker-compose-practice/**'

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: docker-compose-practice
  PYTHON_VERSION: '3.11'
  WORKING_DIR: docker-learning/practice/docker-compose-practice

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          cd ${{ env.WORKING_DIR }}
          python -m pip install --upgrade pip
          pip install -r src/requirements/dev.txt
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          docker compose version
      - name: Lint with Makefile
        run: |
          cd ${{ env.WORKING_DIR }}
          make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    outputs:
      coverage: ${{ steps.coverage.outputs.coverage }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      - name: Install dependencies
        run: |
          cd ${{ env.WORKING_DIR }}
          python -m pip install --upgrade pip
          pip install -r src/requirements/dev.txt
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          docker compose version
      - name: Test with Makefile
        id: coverage
        run: |
          cd ${{ env.WORKING_DIR }}
          make test
          # Optionally extract coverage if needed
          if [ -f .coverage ]; then
            coverage_percent=$(python -c "import coverage; c = coverage.Coverage(); c.load(); print(f'{c.report():.1f}')")
            echo "coverage=$coverage_percent" >> $GITHUB_OUTPUT
            echo "Coverage: $coverage_percent%"
          fi
      - name: Upload coverage reports
        if: exists('${{ env.WORKING_DIR }}/.coverage')
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: ${{ env.WORKING_DIR }}/.coverage

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose-plugin
          docker compose version
      - name: Integration Test with Makefile
        run: |
          cd ${{ env.WORKING_DIR }}
          make dev &
          sleep 20
          curl -f http://localhost/health
          curl -f http://localhost/
          curl -f http://localhost/visits
          docker-compose down -v

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.WORKING_DIR }}/src
          file: ${{ env.WORKING_DIR }}/deploy/docker/app/Dockerfile
          build-args: |
            ENV=production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Verify pushed image
        run: |
          echo "Image pushed successfully!"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build.outputs.digest }}"

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to production server
        run: |
          echo "üöÄ Deploying image ${{ needs.build-and-push.outputs.image-tag }}"
          echo "üìã Deployment steps:"
          echo "  1. Pull new image: ${{ needs.build-and-push.outputs.image-tag }}"
          echo "  2. Update docker-compose.prod.yml with new tag"
          echo "  3. Rolling update with zero downtime"
          echo "  4. Health check verification"
          echo "  5. Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          echo "‚úÖ Deployment simulation completed successfully"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, build-and-push, deploy]
    if: always()
    steps:
      - name: Notify Success
        if: needs.deploy.result == 'success'
        run: |
          echo "üéâ Pipeline completed successfully!"
          echo "‚úÖ Lint: ${{ needs.lint.result }}"
          echo "‚úÖ Test: ${{ needs.test.result }} (Coverage: ${{ needs.test.outputs.coverage }}%)"
          echo "‚úÖ Integration Test: ${{ needs.integration-test.result }}"
          echo "‚úÖ Build & Push: ${{ needs.build-and-push.result }}"
          echo "‚úÖ Deploy: ${{ needs.deploy.result }}"
      - name: Notify Failure
        if: contains(needs.*.result, 'failure')
        run: |
          echo "‚ùå Pipeline failed!"
          echo "Lint: ${{ needs.lint.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Integration Test: ${{ needs.integration-test.result }}"
          echo "Build & Push: ${{ needs.build-and-push.result }}"
          echo "Deploy: ${{ needs.deploy.result }}"
