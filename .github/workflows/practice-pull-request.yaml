name: PR to Develop

on:
  pull_request:
    branches:
      - develop
    paths:
      - 'docker-practice/**'

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            python:
              - 'docker-practice/**/*.py'
              - 'docker-practice/requirements.txt'
              - 'docker-practice/pyproject.toml'
            docker:
              - 'docker-practice/Dockerfile'
              - 'docker-practice/docker-compose.yml'
              - 'docker-practice/scripts/docker/**'

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docker-practice

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run linting
        run: |
          echo "Running code quality checks..."
          ruff check . --output-format=github
          black --check --diff .
          echo "‚úÖ Code quality checks passed!"

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.python == 'true'
    defaults:
      run:
        working-directory: docker-practice

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
          DJANGO_SETTINGS_MODULE: core.settings.test
        run: |
          echo "Running unit tests..."
          python manage.py migrate --no-input
          pytest -v --tb=short
          echo "‚úÖ All tests passed!"

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.docker == 'true' || needs.changes.outputs.python == 'true'
    defaults:
      run:
        working-directory: docker-practice

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build PostgreSQL image
        run: |
          echo "Building PostgreSQL Docker image..."
          docker build -t test-postgres ./scripts/docker/postgres
          echo "‚úÖ PostgreSQL image built successfully!"

      - name: Build Django application image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-practice
          file: ./docker-practice/Dockerfile
          push: false
          load: true
          tags: test-django-app:develop
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker images
        run: |
          echo "Testing Docker images functionality..."

          # Test Django image
          docker run --rm test-django-app:develop python --version
          docker run --rm test-django-app:develop python manage.py check

          echo "‚úÖ Docker images tested successfully!"

      - name: Docker Compose validation
        run: |
          echo "Validating Docker Compose setup..."

          # Validate docker-compose file
          docker-compose config

          # Test build process
          docker-compose build --no-cache

          echo "‚úÖ Docker Compose validation passed!"

  merge-ready:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs: [changes, lint, test, docker-build]
    if: always()
    steps:
      - name: Check all required jobs status
        run: |
          echo "üîç Checking status of all required jobs for PR to develop..."
          echo "=========================================================="

          # Initialize status variables
          CHANGES_STATUS="${{ needs.changes.result }}"
          LINT_STATUS="${{ needs.lint.result }}"
          TEST_STATUS="${{ needs.test.result }}"
          DOCKER_STATUS="${{ needs.docker-build.result }}"

          # Check if tests and docker build were supposed to run
          PYTHON_CHANGED="${{ needs.changes.outputs.python }}"
          DOCKER_CHANGED="${{ needs.changes.outputs.docker }}"

          echo "üìä Job Results:"
          echo "- Change Detection: $CHANGES_STATUS"
          echo "- Code Quality (lint): $LINT_STATUS"

          if [[ "$PYTHON_CHANGED" == "true" ]]; then
            echo "- Unit Tests: $TEST_STATUS"
          else
            echo "- Unit Tests: ‚è≠Ô∏è (skipped - no Python changes)"
          fi

          if [[ "$DOCKER_CHANGED" == "true" || "$PYTHON_CHANGED" == "true" ]]; then
            echo "- Docker Build: $DOCKER_STATUS"
          else
            echo "- Docker Build: ‚è≠Ô∏è (skipped - no relevant changes)"
          fi
          echo ""

          # Check each required job result
          FAILED_JOBS=()

          if [[ "$CHANGES_STATUS" != "success" ]]; then
            echo "‚ùå Change detection failed"
            FAILED_JOBS+=("Change Detection")
          fi

          if [[ "$LINT_STATUS" != "success" ]]; then
            echo "‚ùå Code quality checks failed"
            FAILED_JOBS+=("Code Quality")
          fi

          # Only check test results if tests were supposed to run
          if [[ "$PYTHON_CHANGED" == "true" ]]; then
            if [[ "$TEST_STATUS" != "success" ]]; then
              echo "‚ùå Unit tests failed"
              FAILED_JOBS+=("Unit Tests")
            fi
          fi

          # Only check Docker build if it was supposed to run
          if [[ "$DOCKER_CHANGED" == "true" || "$PYTHON_CHANGED" == "true" ]]; then
            if [[ "$DOCKER_STATUS" != "success" ]]; then
              echo "‚ùå Docker build failed"
              FAILED_JOBS+=("Docker Build")
            fi
          fi

          # Report final status
          if [ ${#FAILED_JOBS[@]} -eq 0 ]; then
            echo ""
            echo "‚úÖ ALL CHECKS PASSED! PR is ready to merge to develop."
            echo "üü¢ Merge button is now ENABLED"
            echo "::notice::All quality gates passed - PR can be merged safely"

            # Summary
            echo ""
            echo "Development Quality Summary:"
            echo "- Code Quality: ‚úÖ"
            if [[ "$PYTHON_CHANGED" == "true" ]]; then
              echo "- Unit Tests: ‚úÖ"
            else
              echo "- Unit Tests: ‚è≠Ô∏è (no Python changes)"
            fi
            if [[ "$DOCKER_CHANGED" == "true" || "$PYTHON_CHANGED" == "true" ]]; then
              echo "- Docker Build: ‚úÖ"
            else
              echo "- Docker Build: ‚è≠Ô∏è (no relevant changes)"
            fi
          else
            echo ""
            echo "‚ùå MERGE BLOCKED - The following checks failed:"
            printf '   - %s\n' "${FAILED_JOBS[@]}"
            echo ""
            echo "üî¥ Merge button is DISABLED until all checks pass"
            echo "::error::Cannot merge to develop - fix failing checks first"
            exit 1
          fi
