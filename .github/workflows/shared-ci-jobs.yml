name: "CI: Reusable Jobs (Docker Practice)"
# Reusable CI jobs for docker-practice: lint, test, docker build/test, and health check
# Uses /docker-practice/Dockerfile and can use scripts from /docker-practice/scripts

on:
  workflow_call:
    inputs:
      target-branch:
        required: true
        type: string
        description: 'Target branch (main or develop)'
      skip-on-no-changes:
        required: false
        type: boolean
        default: false
        description: 'Whether to skip tests when no relevant changes detected'
      run-docker-compose:
        required: false
        type: boolean
        default: false
        description: 'Whether to run docker-compose tests'
      container_name:
        required: false
        type: string
        default: 'docker-practice-app'
        description: 'Container name for health check'
      healthcheck_url:
        required: false
        type: string
        default: 'http://localhost:8000/health/'
        description: 'Health check URL'
    secrets:
      VPS_HOST:
        required: false
      VPS_USERNAME:
        required: false
      VPS_SSH_KEY:
        required: false
    outputs:
      python-changed:
        description: 'Whether Python files changed'
        value: ${{ jobs.changes.outputs.python }}
      docker-changed:
        description: 'Whether Docker files changed'
        value: ${{ jobs.changes.outputs.docker }}

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      python: ${{ steps.filter.outputs.python }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        if: ${{ inputs.skip-on-no-changes }}
        id: filter
        with:
          filters: |
            python:
              - 'docker-practice/**/*.py'
              - 'docker-practice/requirements.txt'
              - 'docker-practice/pyproject.toml'
            docker:
              - 'docker-practice/Dockerfile'
              - 'docker-practice/docker-compose.yml'
              - 'docker-practice/scripts/docker/**'
      - name: Set all changes to true
        if: ${{ !inputs.skip-on-no-changes }}
        run: |
          echo "python=true" >> $GITHUB_OUTPUT
          echo "docker=true" >> $GITHUB_OUTPUT

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: docker-practice
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install ruff black
      - name: Run Ruff
        run: ruff check .
      - name: Run Black
        run: black . --check

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ !inputs.skip-on-no-changes || needs.changes.outputs.python == 'true' }}
    defaults:
      run:
        working-directory: docker-practice
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
      - name: Install dependencies
        run: pip install -r requirements.txt pytest pytest-cov
      - name: Run tests
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
        run: |
          pytest --cov=. --cov-report=xml

  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: changes
    if: ${{ !inputs.skip-on-no-changes || needs.changes.outputs.docker == 'true' || needs.changes.outputs.python == 'true' }}
    defaults:
      run:
        working-directory: docker-practice
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build Django application image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-practice
          file: ./docker-practice/Dockerfile
          push: false
          load: true
          tags: docker-practice-app:${{ inputs.target-branch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Test Docker images
        run: |
          docker run --rm docker-practice-app:${{ inputs.target-branch }} python --version
          docker run --rm docker-practice-app:${{ inputs.target-branch }} python manage.py check
      - name: Test Docker Compose setup
        if: ${{ inputs.run-docker-compose }}
        run: |
          docker-compose config
          docker-compose build
          docker-compose up -d
          timeout 60 bash -c 'until docker-compose ps | grep "Up"; do sleep 2; done'
          docker-compose exec -T web python manage.py check || echo "Service check completed"
          docker-compose logs web
          docker-compose down

  health-check:
    name: Health Check (Reusable)
    runs-on: ubuntu-latest
    steps:
      - name: Check deployment health
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo "Waiting for container to be ready..."
            timeout 60 bash -c 'until docker ps | grep -q "${{ inputs.container_name }}"; do sleep 2; done'
            if ! docker ps | grep -q "${{ inputs.container_name }}"; then
              echo "❌ Container is not running"
              exit 1
            fi
            echo "Checking application health..."
            if ! curl -f ${{ inputs.healthcheck_url }} || [ $? -ne 0 ]; then
              echo "❌ Health check failed"
              exit 1
            fi
            echo "✅ Health check passed"
